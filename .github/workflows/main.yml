name: Build, Test & Publish

on:
  push:
    branches: [release/v*.*.*, bugfix/*, feature/*, features/*, master, dev]
  pull_request:
    branches: [release/v*.*.*, bugfix/*, feature/*, features/*, master, dev]
  
jobs:
  build:
    name: Building repo
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write
      id-token: write
      pull-requests: write
    container: ghcr.io/kiracore/docker/base-image:v0.13.11
    steps:
      
      - name: Add safe.directory
        id: add-safe-dir
        run: |
          git config --global --add safe.directory /github/workspace
          git config --global --add safe.directory $PWD

      - name: Checkout repository
        id: checkout-repo
        uses: actions/checkout@v3

      - name: Extract branch name on push
        id: extract-branch-name-push
        if: github.event_name == 'push'
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
          echo "DESTINATION_BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
      
      - name: Extract branch name on pull request
        id: extract-branch-name-pull
        if: github.event_name == 'pull_request'
        env:
          REF_BRANCH: ${{ github.event.pull_request.head.ref }}
          BASE_REF_BRANCH: ${{ github.base_ref }}
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${{ env.REF_BRANCH }})" >> $GITHUB_ENV
          echo "DESTINATION_BRANCH=$(echo ${{ env.BASE_REF_BRANCH }})" >> $GITHUB_ENV

      - name: Organizing environment & archiving source code
        id: org-env-src-code
        run: |
          WORK_DIR=$PWD
          BASE_DIR=$(basename "$WORK_DIR")
          cd ../ && tar -czvf src.tar.gz -C ./$BASE_DIR . && cp ./src.tar.gz ./$BASE_DIR/src.tar.gz && cd ./$BASE_DIR
          echo "(current dir): $PWD" && ls -l ./
          chmod -Rv 555 ./scripts
          RELEASE_VER="$(./scripts/version.sh)" && echo "RELEASE_VER=$RELEASE_VER" >> $GITHUB_ENV
          RELEASE_BRANCH="release/$RELEASE_VER" && echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_ENV
          REPOSITORY_NAME="${{ github.event.repository.name }}" && echo "REPOSITORY_NAME=$REPOSITORY_NAME" >> $GITHUB_ENV
          git ls-remote https://github.com/${{ github.repository }} | egrep -q "refs/tags/${RELEASE_VER}$" && echo "RELEASE_EXISTS=true" >> $GITHUB_ENV || echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          if [[ "$RELEASE_VER" =~ $VERSION_REGEX ]] && [[ "$SOURCE_BRANCH" =~ $VERSION_REGEX ]] && [ "$SOURCE_BRANCH" != "$RELEASE_VER" ] ; then 
            echo "ERROR: Version branch name MUST be the same as the app version, run scripts/version.sh to check app version!" 
            exit 1
          else
            echo "INFO: Variables setup succeeded"
          fi
      - name: Print debug data
        id: prt-dbg-data
        run: |
          go version
          echo "     Source branch: ${{ env.SOURCE_BRANCH }}"
          echo "Destination branch: ${{ env.DESTINATION_BRANCH }}"
          echo "    Release branch: ${{ env.RELEASE_BRANCH }}"
          echo "        Event name: ${{ github.event_name }}"
          echo "   Repository name: ${{ env.REPOSITORY_NAME }}"
          echo "   Release version: ${{ env.RELEASE_VER }}"
          echo "    Release exists: ${{ env.RELEASE_EXISTS }}"
      
      - name: Installing KIRA2.0
        id: install-kira2
        run: |
          echo "(current dir): $PWD" && ls -l ./
          chmod -Rv 555 ./scripts
          make install
          kira2 version
          kira2_launcher version

      - name: Launching tests...
        id: run-test
        run: |
          echo "(current dir): $PWD" && ls -l ./
          chmod -Rv 555 ./scripts
          make test

      - name: Publishing KIRA2.0 binaries
        id: pub-bin
        shell: bash
        run: |
          echo "(current dir): $PWD" && ls -l ./
          chmod -Rv 555 ./scripts
          make publish
          touch ./RELEASE.md
          cp -fv ./RELEASE.md ./bin/RELEASE.md
          cp -fv ./src.tar.gz ./bin/source-code.tar.gz
          chmod -Rv 777 ./bin
          echo -e "\n\r\n\r\`\`\`" >> ./bin/RELEASE.md
          echo -e "        Release Versions: $RELEASE_VER" >> ./bin/RELEASE.md
          echo -e "       Release Date Time: $(date --rfc-2822)" >> ./bin/RELEASE.md
          echo "                       kira2-darwin-amd64.deb: sha256:$(sha256sum ./bin/kira2-darwin-amd64.deb  | awk '{ print $1 }')" >> ./bin/RELEASE.md
          echo "     kira2_launcher-darwin-amd64.deb: sha256:$(sha256sum ./bin/kira2_launcher-darwin-amd64.deb  | awk '{ print $1 }')" >> ./bin/RELEASE.md
          echo "                        kira2-linux-amd64.deb: sha256:$(sha256sum ./bin/kira2-linux-amd64.deb   | awk '{ print $1 }')" >> ./bin/RELEASE.md
          echo "       kira2_laucher-linux-amd64.deb: sha256:$(sha256sum ./bin/kira2_launcher-linux-amd64.deb   | awk '{ print $1 }')" >> ./bin/RELEASE.md
          echo "                    kira2-windows-amd64.exe: sha256:$(sha256sum ./bin/kira2-windows-amd64.exe   | awk '{ print $1 }')" >> ./bin/RELEASE.md
          echo "   kira2_laucher-windows-amd64.exe: sha256:$(sha256sum ./bin/kira2_launcher-windows-amd64.exe   | awk '{ print $1 }')" >> ./bin/RELEASE.md
          echo "                                source-code.tar.gz: sha256:$(sha256sum ./bin/source-code.tar.gz | awk '{ print $1 }')" >> ./bin/RELEASE.md
          echo -e "\`\`\`"   >> ./bin/RELEASE.md
          tar -czvf deb.tar.gz -C ./bin .
      
      
      - name: Print job results
        run: |
          echo "Add safe.directory...                               ${{ steps.add-safe-dir.outcome }}"
          echo "Checkout repository...                              ${{ steps.checkout-repo.outcome }}"
          echo "Extract branch name on push...                      ${{ steps.extract-branch-name-push.outcome }}"
          echo "Extract branch name on pull...                      ${{ steps.extract-branch-name-pull.outcome }}"
          echo "Organizing environment & archiving source code..    ${{ steps.org-env-src-code.outcome }}"
          echo "Printing debug data...                              ${{ steps.prt-dbg-data.outcome }}"
          echo "Installing KIRA2.0...                               ${{ steps.install-kira2.outcome }}"
          echo "Launching test...                                   ${{ steps.run-test.outcome }}"
          echo "Publishing KIRA2.0 binaries...                      ${{ steps.pub-bin.outcome }}"