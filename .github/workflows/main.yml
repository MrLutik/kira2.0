name: Build, Test & Publish

on:
  push:
    branches: [ release/v*.*.*, features/*, feature/*, master, dev, latest ]
  pull_request:
    branches: [ release/v*.*.*, bugfix/*,  dev, latest ]

env:
  VERSION_REGEX: "^v[0-9]+\\.[0-9]+\\.[0-9]+$" # example, change this to your version regex

jobs:
  build-amd64:
    name: AMD64 - Building & Testing repository
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      pull-requests: write
    container: 
      image: ghcr.io/kiracore/docker/base-image:v0.13.11
    steps:
      # Work around https://github.com/actions/checkout/issues/760
      - name: Add safe.directory
        run: |
          git config --global --add safe.directory /github/workspace
          git config --global --add safe.directory $PWD
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
      - name: Checking dependency versions & packaging source files
        run: |
          echo "(current dir): $PWD" && ls -l ./
          cd ../ && tar -czvf src.tar.gz -C ./kira2.0 . && cp ./src.tar.gz ./kira2.0/src.tar.gz
          cd ./kira2.0
          chmod -Rv 555 ./scripts
          echo "RELEASE_VER: $(./scripts/version.sh)"
          GO_VER="$(go version)"
          echo "ENVS: $(env)"
          echo "HOME: $HOME"
          echo " PWD: $PWD"
          echo "  GO: $GO_VER"
      - name: Extract branch name on push
        if: github.event_name == 'push'
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
          echo "DESTINATION_BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
      - name: Extract branch name on pull request
        if: github.event_name == 'pull_request'
        env:
          REF_BRANCH: ${{ github.event.pull_request.head.ref }}
          BASE_REF_BRANCH: ${{ github.base_ref }}
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${{ env.REF_BRANCH }})" >> $GITHUB_ENV
          echo "DESTINATION_BRANCH=$(echo ${{ env.BASE_REF_BRANCH }})" >> $GITHUB_ENV        
      - name: Inspecting & organizing artifacts
        run: |
          echo "(current dir): $PWD" && ls -l ./
          chmod -Rv 555 ./scripts
          RELEASE_VER="$(./scripts/version.sh)" && echo "RELEASE_VER=$RELEASE_VER" >> $GITHUB_ENV
          RELEASE_BRANCH="release/$RELEASE_VER" && echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_ENV
          REPOSITORY_NAME="${{ github.repository }}" && echo "REPOSITORY_NAME=$REPOSITORY_NAME" >> $GITHUB_ENV
          git ls-remote https://github.com/$REPOSITORY_NAME | egrep -q "refs/tags/${RELEASE_VER}$" && echo "RELEASE_EXISTS=true" >> $GITHUB_ENV || echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          if [[ "$RELEASE_VER" =~ ${{ env.VERSION_REGEX }} ]] && [[ "$SOURCE_BRANCH" =~ ${{ env.VERSION_REGEX }} ]] && [ "$SOURCE_BRANCH" != "$RELEASE_VER" ] ; then 
            echo "ERROR: Version branch name MUST be the same as the app version, run scripts/version.sh to check app version!" 
            exit 1
          else
            echo "INFO: Variables setup succeeded"
          fi 
    
    
      - name: Print debug data before testing
        run: |
          echo "     Source branch: ${{ env.SOURCE_BRANCH }}"
          echo "Destination branch: ${{ env.DESTINATION_BRANCH }}"
          echo "    Release branch: ${{ env.RELEASE_BRANCH }}"
          echo "        Event name: ${{ github.event_name }}"
          echo "   Repository name: ${{ env.REPOSITORY_NAME }}"
          echo "   Release version: ${{ env.RELEASE_VER }}"
          echo "    Release exists: ${{ env.RELEASE_EXISTS }}"
      - name: Testing & Building KIRA2.0
        run: |
          set -x
          echo "(current dir): $PWD" && ls -l ./
          tar xvf ./src.tar.gz
          chmod -Rv 555 ./scripts 
          chmod -Rv 666 ./RELEASE.md 
          export SOURCE_BRANCH=${{ env.SOURCE_BRANCH }}
          make test
          make build
        id: build-step # Add an id to reference this step's output
        env:
          BUILD_STEP_STATUS: "success"
        continue-on-error: true # Ensure this step does not stop the job
      - name: Set Build Step Status
        run: |
          if [ ${{ job.status }} != 'success' ]
          then
            echo "::set-output name=build-step-status::failure"
          fi
        id: check-build-status
      - name: Publishing KIRA2.0 binaries
        run: |
          set -x
          make publish
          touch ./RELEASE.md
          cp -fv ./RELEASE.md ./bin/RELEASE.md
          cp -fv ./src.tar.gz ./bin/source-code.tar.gz
          tar -czvf kira2.0-bin-amd64.tar.gz -C ./bin .
        id: publish-step # Add an id to reference this step's output
        env:
          PUBLISH_STEP_STATUS: "success"
        continue-on-error: true # Ensure this step does not stop the job
      - name: Set Publish Step Status
        run: |
          if [ ${{ job.status }} != 'success' ]
          then
            echo "::set-output name=publish-step-status::failure"
          fi
  create-release:
      name: Create Release and Upload Artifacts
      needs: [build-amd64, failure-handling]
      if: success() && github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/v')
      runs-on: ubuntu-latest
      steps:
      # your steps are unchanged until "Create Release" step
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.RELEASE_VER }}
          release_name: Release ${{ env.RELEASE_VER }}
          draft: false
          prerelease: false     


      - name: Download linux artifact for kira2
        uses: actions/download-artifact@v2
        with:
          name: kira2-linux-amd64.deb
          path: /bin

      - name: Download linux artifact for kira2_launcher
        uses: actions/download-artifact@v2
        with:
          name: kira2_launcher-linux-amd64.deb
          path: /bin    

      - name: Download darwin artifact kira2
        uses: actions/download-artifact@v2
        with:
          name: kira2-darwin-amd64.deb
          path: /bin

      - name: Download darwin artifact kira2_launcher
        uses: actions/download-artifact@v2
        with:
          name: kira2_laucher-darwin-amd64.deb
          path: /bin

      - name: Download windows artifact kira2
        uses: actions/download-artifact@v2
        with:
          name: kira2-windows-amd64.exe
          path: /bin

      - name: Download windows artifact kira2_launcher
        uses: actions/download-artifact@v2
        with:
          name: kira2_launcher-windows-amd64.exe
          path: /bin

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Linux Release Asset
        id: upload-linux-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./kira2.0-bin-amd64-linux.tar.gz
          asset_name: kira2.0-bin-amd64-linux.tar.gz
          asset_content_type: application/gzip

      - name: Upload Darwin Release Asset
        id: upload-darwin-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./kira2.0-bin-amd64-darwin.tar.gz
          asset_name: kira2.0-bin-amd64-darwin.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows Release Asset
        id: upload-windows-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./kira2.0-bin-amd64-windows.tar.gz
          asset_name: kira2.0-bin-amd64-windows.tar.gz
          asset_content_type: application/gzip
  
  failure-handling:
    name: Handle Failures
    runs-on: ubuntu-latest
    needs: [build-amd64]
    if: always()
    steps:
      - name: Check for failures
        run: |
          if [ "${{ needs.build-amd64.outputs.build-step-status }}" == "failure" ] || [ "${{ needs.build-amd64.outputs.publish-step-status }}" == "failure" ]; then
            echo "A failure occurred during the workflow execution."
            echo "Build Step Status: ${{ needs.build-amd64.outputs.build-step-status }}"
            echo "Publish Step Status: ${{ needs.build-amd64.outputs.publish-step-status }}"
          fi


  
